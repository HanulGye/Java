package com.hanul.abstractTest;

public class AbstractTest {
	
	//3. abstract
	//	추상의, 무조건변경의 의미
	//	1)사용가능한 곳
	//	클래스의 선언부 : 이 클래스를 상속해서 사용하라는 의미
	//	메서드의 선언부 (변수 x) : 이 메서드를 오버라이딩해서 사용하라는 의미 
	//	**abstract가 선언된 메서드 자체는 아무것도 쓰여져선 안됨.
	//	**참고로 얘는 다른 그외지정자랑은 의미적으로 모순이 많아서 거의 단독으로 씀.
	
	//	2)추상클래스란?
	//	완전히 구상된 클래스가 아니라는 의미
	//	추상개념과도 같은 것이기에, 객체로 구현하지 말라고 만드는 강제하는게 추상클래스이다.
	//	eg. 동물, 유닛등과 같은 범주들.
	//	2)-1 객체 생성 불가의 특징이 있다.
	//  2)-2 추상클래스의 멤버(구성요소)들 -> 멤버변수,멤버메서드,생성자,추상메서드
	//	추상메서드란?
	//	메서드의 헤드부분만 있고 바디는 없다
	//  abstract method가 하나라도 있는 클래스는 절대적으로 abstract class가 되어야함.
	// 	중첩된 추상클래스의 형태도 존재한다.
	// 	이때, 중첩된 추상클래스에는 상위의 추상클래스가 가진 추상메서드를 오버라이딩 안해도 됨.
	// 	추상클래스를 왜 쓸까?
	// 	대규모개발 프로젝트 같은 경우는 표준화가 필요하기에 추상클래스를 통해 이를 실현한다.
	
	//	3)Interface란?
	//	추상클래스의 일종! 
	// 	추상클래스와의 차이는 추상화의 정도가 더 심하다는 것.
	// 	그래서 멤버변수나, 멤버메서드, 생성자는 존재할 수 없다.
	//	오직 상수와 추상메서드만 가진다.
	//	인터페이스의 역할이란?
	//	추상클래스와 비슷하게도 표준을 제시한다.
	// 	일종의 컴퓨터 단자가 각기 다르고 해당단자에 맞게 연결해야 작동하는것처럼
	
}
